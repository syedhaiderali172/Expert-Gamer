<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #6dd5ed, #2193b0);
    }

    /* Main game screen */
    .game-screen {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    h1 {
      color: #fff;
      margin-bottom: 20px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 10px;
    }

    .cell {
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #fff;
      border: 2px solid #333;
      font-size: 2rem;
      font-weight: bold;
      cursor: pointer;
    }

    .cell:hover {
      background-color: #f1f1f1;
    }

    .restart-button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 1rem;
      background-color: #4caf50;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }

    .restart-button:hover {
      background-color: #45a049;
    }

    /* Result screen */
    .result-screen {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .result-screen h2 {
      color: #fff;
      font-size: 2rem;
    }

    .new-game-button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 1rem;
      background-color: #2193b0;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }

    .new-game-button:hover {
      background-color: #1976a6;
    }

    .hidden {
      display: none;
    }

    /* Mobile responsiveness */
    @media (max-width: 600px) {
      .board {
        grid-template-columns: repeat(3, 80px);
        grid-template-rows: repeat(3, 80px);
      }

      .cell {
        font-size: 1.5rem;
      }

      .restart-button,
      .new-game-button {
        font-size: 0.9rem;
      }
    }
  </style>
</head>

<body>
  <div id="gameScreen" class="game-screen">
    <h1>Tic Tac Toe</h1>
    <div class="board">
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
      <div class="cell" data-cell></div>
    </div>
    <button id="restartButton" class="restart-button">Restart Game</button>
  </div>

  <div id="resultScreen" class="result-screen hidden">
    <h2 id="resultMessage"></h2>
    <button id="newGameButton" class="new-game-button">New Game</button>
  </div>

  <script>
    const cells = document.querySelectorAll("[data-cell]");
    const restartButton = document.getElementById("restartButton");
    const gameScreen = document.getElementById("gameScreen");
    const resultScreen = document.getElementById("resultScreen");
    const resultMessage = document.getElementById("resultMessage");
    const newGameButton = document.getElementById("newGameButton");

    let currentPlayer = "X";
    let board = ["", "", "", "", "", "", "", "", ""];
    let gameActive = true;

    const winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    function handleCellClick(e) {
      const cell = e.target;
      const cellIndex = Array.from(cells).indexOf(cell);

      if (board[cellIndex] !== "" || !gameActive) {
        return;
      }

      board[cellIndex] = currentPlayer;
      cell.innerText = currentPlayer;
      checkWinner();
      currentPlayer = currentPlayer === "X" ? "O" : "X";
    }

    function checkWinner() {
      let roundWon = false;

      for (let i = 0; i < winningCombinations.length; i++) {
        const [a, b, c] = winningCombinations[i];
        if (board[a] === "" || board[b] === "" || board[c] === "") {
          continue;
        }
        if (board[a] === board[b] && board[b] === board[c]) {
          roundWon = true;
          break;
        }
      }

      if (roundWon) {
        showResultScreen(`${currentPlayer} wins!`);
        gameActive = false;
        return;
      }

      if (!board.includes("")) {
        showResultScreen(`It's a draw!`);
        gameActive = false;
        return;
      }
    }

    function showResultScreen(message) {
      resultMessage.innerText = message;
      gameScreen.classList.add("hidden");
      resultScreen.classList.remove("hidden");
    }

    function restartGame() {
      currentPlayer = "X";
      board = ["", "", "", "", "", "", "", "", ""];
      gameActive = true;
      cells.forEach((cell) => (cell.innerText = ""));
      gameScreen.classList.remove("hidden");
      resultScreen.classList.add("hidden");
    }

    cells.forEach((cell) => cell.addEventListener("click", handleCellClick));
    restartButton.addEventListener("click", restartGame);
    newGameButton.addEventListener("click", restartGame);
  </script>
</body>

</html>
